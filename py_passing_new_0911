import sys
import Node
import time
import MAP
import robot2
import avoid
import variable

# 変数宣言
brock=[
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],
  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
  [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
]

global agent1, agent2, stop_time
global count, play_count_1, play_count_2, count_2
global agent, path_1, path_2
global goal,back,back_count
global stop, delete, no_stop,pre_x,pre_y,pre_stop

x_1 = []
y_1 = []
x_2 = []
y_2 = []
path_1 = []
path_2 = []
agent = []

goal = False
goal_2 = False
stop = False
no_stop = True
delete = False
pre_stop=False
agent1 = 490
count = 0
back=0
back_count =0
count_2 = 0
play_count_1 = 0
play_count_2 = 0
stop_time = 0
pre_x =0
pre_y =0

def path_search1():
    # path_search2()
    # エージェント１の経路探索
    global play_count_1  # 関数の実行回数

    if play_count_1 == 0:
        start = (49, 0)  # スタート地点  49,0
        end = (8, 7)  # タスク地点 (goal)  8,7
        path = Node.astar(brock, start, end)  # A_starで探索された経路

        # start_2 = (0,49)  # スタート地点
        # end_2 = (8, 30)  # タスク地点 (goal)
        # path_2 = Node.astar(brock, start_2, end_2)  # A_starで探索された経路
        # print(path)
        play_count_1 += 1

    elif play_count_1 ==1:
        start = (8, 7)  # スタート地点  8,7
        end = (0, 49)  # タスク地点 (goal) 49,0
        path = Node.astar(brock, start, end)  # A_starで探索された経路
    # print(path)

    # 探索された経路のx,yを各配列に格納
    for i in range(len(path)):
        x_1.append(path[i][1])
        y_1.append(path[i][0])
        print(x_1)


def path_search2():

    # エージェント2の経路探索
    global play_count_2, path_2, path_1  # 関数の実行回数
    # println(play_count_2)

    if play_count_2 == 0:
        start = (0, 49)  # スタート地点 0,49
        end = (8, 31)  # タスク地点 (goal)  8,31
        path = Node.astar(brock, start, end)  # A_starで探索された経路
        #print(path)
        # println(path)
        play_count_2 += 1

    elif play_count_2 ==1:
        start = (8, 31)  #  スタート地点
        end = (49,0)  # タスク地点 (goal)
        path = Node.astar(brock, start, end)  # A_starで探索された経路
    # #     println(path_2)

    # 探索された経路のx,yを各配列に格納
    for i in range(len(path)):
        x_2.append(path[i][1])
        y_2.append(path[i][0])
        print(x_2)

    # for i in range(len(path)):
    #     x_2.append(path_2[i][1])
    #     y_2.append(path_2[i][0])

# 探索された経路を可視化する関数
def path_visual():
    global count
    for i in range(len(x)):
        fill(0, 0, 200)
        rect(x[i] * 10, y[i] * 10, 10, 10)  # 探索された経路の升目に色を塗る

def agent_move1():
    global count, goal

    if count <= len(x_1) - 1 and goal == False and variable.stop==False:
        fill(155, 100, 100)
        ellipse(x_1[count] * 10 + 2.5, y_1[count] * 10 + 4, 7, 7)  # エージェント１
        print(robot2.stop)
        
        if count !=len(x_1)-1:
            count+=1
        

    #     fill(155, 100, 100)
    #     # print("count")
    #     # print(count)
    #     ellipse(x_2[count-1] * 10 + 2.5, y_2[count-1] * 10 + 4, 7, 7)  # エージェント１
        

        # print("robot1")
        # print(x_1[count]*10+2.5)

    #     if count >= len(x_1) - 1:
    #         goal = True

    # if goal == True:
    #     fill(155, 100, 100)
    #     ellipse(x_1[-1] * 10 + 2.5, y_1[-1] * 10 + 4, 7, 7)  # エージェント１
        

    # println("-----")
    # println(count)
    # if count !=len(x_1) -1:
    #     count += 1
    # else:
    #     count =len(x_1)-1

def agent_move2():
    global count_2, goal_2, stop_time,stop,back,no_stop,back_count,pre_x,pre_y,pre_stop,block_num_pre
    # print(len(x_2))
    # fill(0)
    # text("2", x_2[count_2]*10+2.5, y_2[count_2]*10+4+20, 60, 600)
    # if count_2 <= len(x_2) and goal_2 == False  and robot1.stop==False:
    #     fill(155, 100, 100)
    #     ellipse(x_2[count_2] * 10 + 2.5, y_2[count_2] * 10 + 4, 7, 7)
    #     pre=avoid.avoid_robot(x_1[count]*10+2.5,x_2[count_2]*10+2.5,y_1[count]*10+4,y_2[count_2]*10+4)
        
        
    #     if count_2 !=len(x_2)-1:
    #         count_2+=1 
            
    # if robot1.collision ==True:
        
    if (variable.count_2 !=len(x_2)-1 and (variable.collision==False)):
        print("play")

        #pre_x,pre_y,pre_stop=avoid.avoid_robot(x_1[count]*10+2.5,x_2[variable.count_2]*10+2.5,y_1[count]*10+4,y_2[variable.count_2]*10+4,variable.count_2)
        variable.count_2+=1
        
        # if ((floor(mag(x_2[variable.count_2]*10+2.5,y_2[variable.count_2]*10+4))/10) - (floor(mag(x_1[count]*10+2.5, y_1[count]*10+4))/10) ==2  and variable.count_2 >=10): 
        #     back =variable.count_2
        #     print("back")
        #     print(back)
    else:
        print("stoppped")
        print("count_2")
        print(variable.count_2)
        #pre_y -10
        #variable.count_2 =0
        # print("ooooo")
        # print(variable.count_2)
        # print(x_2[variable.count_2]*10)
        # #print(print(floor(mag(x_2[variable.count_2]*10+2.5,y_2[variable.count_2]*10+4))/10))
        
        # variable.count_2 =48
        
        
    #elif robot2.stop==True:
    #print(variable.count_2)
    #if no_stop ==False:
    if back !=0:
        variable.count_2 =back

    pre_x,pre_y,pre_stop=avoid.avoid_robot(x_1[count]*10+2.5,x_2[variable.count_2]*10+2.5,y_1[count]*10+4,y_2[variable.count_2]*10+4,variable.count_2)
    fill(155, 100, 100)
    #ellipse(x_2[count_2] * 10 + 2.5, y_2[count_2] * 10 + 4, 7, 7)
    if variable.collision ==True:
        variable.block_num_pre =(floor(x_2[variable.count_2] * 10 + 2.5)/10)
        agent2_y =pre_y -10
        agent2_x =pre_x -10
        variable.stop_time +=1
        print(stop_time)
        print(variable.block_num_pre)
        print("time_")
       # MAP.make_brock(x_2[variable.count_2]*10+2.5)
        if variable.stop_time >=10:
            agent2_y =pre_y
            print("count_2")
            print(variable.count_2)
            #variable.count_2 +=1

            #no_stop==True
            #if agent2_y ==pre_y:
            variable.collision=False
            print("aaaaa")
    else:
        agent2_y =pre_y
    ellipse(pre_x, agent2_y, 7, 7)
    # if pre_stop==True and pre_y ==74:
    #     variable.collision =True
        
    
        # print("robot2")
        # print(x_2[count_2]*10+2.5)
        #print(count_2)
        
        # if variable.stop==True:
        #     fill(155, 100, 100)
        #     ellipse(x_1[count] * 10 + 2.5, y_1[count] * 10 + 4, 7, 7)
    #else:
        
            # fill(155, 100, 100)
            # ellipse(pre, y_2[count_2] * 10 + 4, 7, 7)
        
        # println(x_1[count]*10+2.5)
        
    #     if count_2 >= len(x_2):
    #         goal_2 = True
    

    # if goal_2 == True:

    #     fill(155, 100, 100)
    #     ellipse(x_2[-1] * 10 + 2.5, y_2[-1] * 10 + 4, 7, 7)  # エージェント2

    #if variable.stop == False:

        
        # print("------")
        # if count_2 != len(x_2) -1:
        #      count_2 += 1
        #      print("tuuzyou")
        #      print(count_2)
        # else:
        #      count_2 =len(x_2) -1
        # print(x_2[count_2] * 10 + 2.5)
    # else:
    #     print(x_2[count_2] * 10 + 2.5)
    #     #noLoop()
    
    #     # if ((millis()/1000 - stop_time)==1):
    #     #     print(millis()/1000 - stop_time)
    #     variable.pre =x_2[count_2]*10+2.5  #障害物がある所に移動
    #     #ellipse(pre, y_2[count_2] * 10 + 4 +back, 7, 7)
    #     back +=10            
    #     ellipse(variable.pre, y_1[count_2] * 10 + 4, 7, 7) 
        #衝突回避をするために移動したら2秒ほど停止する
        # if back ==0 and back_count !=3:
        #     back =-10
        #     back_count +=1
            
        #衝突回避をした後，ゴール地点まで移動する
        # if back_count >=2 and back >=0:
        #        ellipse(x_1[count_2-1]*10+2.5, y_1[count_2-1] * 10 + 4, 7, 7)        
        #        if count_2 !=len(x_2)-1:
        #            count_2 +=1
        #        #count_2+=1
        #        print("avoidddddr")
        #        print([count_2])

        # else :
        #        ellipse(variable.pre, y_2[count_2] * 10 + 4 +back, 7, 7)  #衝突回避を行う        
            
        # back +=10
        # print(back)
        # if back ==10:
        #     noLoop()
        #variable.stop_time+=1
        #back +=10
        
        # back+=10
        # print(back)
        # if back==0:
        #     noLoop()

            
    
    
def setup():
    size(500, 500)
    frameRate(3)

def draw():
    background(0)
    textSize(40)
    #text("2", agent1[0], agent1[1]+20, 60, 600)

    MAP.make_brock(-1)
    # path_search1()
    # path_search2()
    # path_visual()
    agent_move1()
    # #avoid()
    agent_move2()
    

if __name__ == '__main__':
    path_search1()
    path_search1()
    # avoid.avoid_robot()
    # robot1.path_search1()
    path_search2()
    path_search2()
